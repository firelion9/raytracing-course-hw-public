// This source file has been generated by generate.py->vectors.py

struct vec2 {
    float x = 0;
    float y = 0;

    [[nodiscard]] inline vec2 xy() const {
        return {this->x, this->y};
    }

    [[nodiscard]] inline vec2 yx() const {
        return {this->y, this->x};
    }

    [[nodiscard]] inline float len2() const {
        return this->x * this->x+this->y * this->y;
    }
    [[nodiscard]] inline float len() const {
        return sqrt(this->len2());
    }
};

[[nodiscard]] inline vec2 operator+(const vec2& a, const vec2& b) {
    return {a.x + b.x, a.y + b.y};
}

[[nodiscard]] inline vec2 operator-(const vec2& a, const vec2& b) {
    return {a.x - b.x, a.y - b.y};
}

[[nodiscard]] inline vec2 operator*(const vec2& a, const vec2& b) {
    return {a.x * b.x, a.y * b.y};
}

[[nodiscard]] inline vec2 operator/(const vec2& a, const vec2& b) {
    return {a.x / b.x, a.y / b.y};
}

inline vec2& operator+=(vec2& a, const vec2& b) {
    a.x += b.x;
    a.y += b.y;
    return a;
}

inline vec2& operator-=(vec2& a, const vec2& b) {
    a.x -= b.x;
    a.y -= b.y;
    return a;
}

inline vec2& operator*=(vec2& a, const vec2& b) {
    a.x *= b.x;
    a.y *= b.y;
    return a;
}

inline vec2& operator/=(vec2& a, const vec2& b) {
    a.x /= b.x;
    a.y /= b.y;
    return a;
}

[[nodiscard]] inline vec2 operator-(const vec2& vec) {
    return {-vec.x, -vec.y};
}

[[nodiscard]] inline vec2 operator*(const vec2& vec, float scl) {
    return {vec.x * scl, vec.y * scl};
}

[[nodiscard]] inline vec2 operator*(float scl, const vec2& vec) {
    return {scl * vec.x , scl * vec.y };
}

[[nodiscard]] inline vec2 operator/(const vec2& vec, float scl) {
    return {vec.x / scl, vec.y / scl};
}

[[nodiscard]] inline vec2 operator/(float scl, const vec2& vec) {
    return {scl / vec.x , scl / vec.y };
}

[[nodiscard]] inline vec2& operator*=(vec2& vec, float scl) {
    vec.x *= scl;
    vec.y *= scl;
return vec;
}

[[nodiscard]] inline vec2& operator/=(vec2& vec, float scl) {
    vec.x /= scl;
    vec.y /= scl;
return vec;
}

inline std::istream& operator>>(std::istream& stream, vec2& vec) {
    return stream >> vec.x >> vec.y;
}


struct vec3 {
    float x = 0;
    float y = 0;
    float z = 0;

    [[nodiscard]] inline vec2 xy() const {
        return {this->x, this->y};
    }

    [[nodiscard]] inline vec2 xz() const {
        return {this->x, this->z};
    }

    [[nodiscard]] inline vec2 yx() const {
        return {this->y, this->x};
    }

    [[nodiscard]] inline vec2 yz() const {
        return {this->y, this->z};
    }

    [[nodiscard]] inline vec2 zx() const {
        return {this->z, this->x};
    }

    [[nodiscard]] inline vec2 zy() const {
        return {this->z, this->y};
    }

    [[nodiscard]] inline vec3 xyz() const {
        return {this->x, this->y, this->z};
    }

    [[nodiscard]] inline vec3 xzy() const {
        return {this->x, this->z, this->y};
    }

    [[nodiscard]] inline vec3 yxz() const {
        return {this->y, this->x, this->z};
    }

    [[nodiscard]] inline vec3 yzx() const {
        return {this->y, this->z, this->x};
    }

    [[nodiscard]] inline vec3 zxy() const {
        return {this->z, this->x, this->y};
    }

    [[nodiscard]] inline vec3 zyx() const {
        return {this->z, this->y, this->x};
    }

    [[nodiscard]] inline float len2() const {
        return this->x * this->x+this->y * this->y+this->z * this->z;
    }
    [[nodiscard]] inline float len() const {
        return sqrt(this->len2());
    }
};

[[nodiscard]] inline vec3 operator+(const vec3& a, const vec3& b) {
    return {a.x + b.x, a.y + b.y, a.z + b.z};
}

[[nodiscard]] inline vec3 operator-(const vec3& a, const vec3& b) {
    return {a.x - b.x, a.y - b.y, a.z - b.z};
}

[[nodiscard]] inline vec3 operator*(const vec3& a, const vec3& b) {
    return {a.x * b.x, a.y * b.y, a.z * b.z};
}

[[nodiscard]] inline vec3 operator/(const vec3& a, const vec3& b) {
    return {a.x / b.x, a.y / b.y, a.z / b.z};
}

inline vec3& operator+=(vec3& a, const vec3& b) {
    a.x += b.x;
    a.y += b.y;
    a.z += b.z;
    return a;
}

inline vec3& operator-=(vec3& a, const vec3& b) {
    a.x -= b.x;
    a.y -= b.y;
    a.z -= b.z;
    return a;
}

inline vec3& operator*=(vec3& a, const vec3& b) {
    a.x *= b.x;
    a.y *= b.y;
    a.z *= b.z;
    return a;
}

inline vec3& operator/=(vec3& a, const vec3& b) {
    a.x /= b.x;
    a.y /= b.y;
    a.z /= b.z;
    return a;
}

[[nodiscard]] inline vec3 operator-(const vec3& vec) {
    return {-vec.x, -vec.y, -vec.z};
}

[[nodiscard]] inline vec3 operator*(const vec3& vec, float scl) {
    return {vec.x * scl, vec.y * scl, vec.z * scl};
}

[[nodiscard]] inline vec3 operator*(float scl, const vec3& vec) {
    return {scl * vec.x , scl * vec.y , scl * vec.z };
}

[[nodiscard]] inline vec3 operator/(const vec3& vec, float scl) {
    return {vec.x / scl, vec.y / scl, vec.z / scl};
}

[[nodiscard]] inline vec3 operator/(float scl, const vec3& vec) {
    return {scl / vec.x , scl / vec.y , scl / vec.z };
}

[[nodiscard]] inline vec3& operator*=(vec3& vec, float scl) {
    vec.x *= scl;
    vec.y *= scl;
    vec.z *= scl;
return vec;
}

[[nodiscard]] inline vec3& operator/=(vec3& vec, float scl) {
    vec.x /= scl;
    vec.y /= scl;
    vec.z /= scl;
return vec;
}

inline std::istream& operator>>(std::istream& stream, vec3& vec) {
    return stream >> vec.x >> vec.y >> vec.z;
}


struct vec4 {
    float x = 0;
    float y = 0;
    float z = 0;
    float w = 0;

    [[nodiscard]] inline vec2 xy() const {
        return {this->x, this->y};
    }

    [[nodiscard]] inline vec2 xz() const {
        return {this->x, this->z};
    }

    [[nodiscard]] inline vec2 xw() const {
        return {this->x, this->w};
    }

    [[nodiscard]] inline vec2 yx() const {
        return {this->y, this->x};
    }

    [[nodiscard]] inline vec2 yz() const {
        return {this->y, this->z};
    }

    [[nodiscard]] inline vec2 yw() const {
        return {this->y, this->w};
    }

    [[nodiscard]] inline vec2 zx() const {
        return {this->z, this->x};
    }

    [[nodiscard]] inline vec2 zy() const {
        return {this->z, this->y};
    }

    [[nodiscard]] inline vec2 zw() const {
        return {this->z, this->w};
    }

    [[nodiscard]] inline vec2 wx() const {
        return {this->w, this->x};
    }

    [[nodiscard]] inline vec2 wy() const {
        return {this->w, this->y};
    }

    [[nodiscard]] inline vec2 wz() const {
        return {this->w, this->z};
    }

    [[nodiscard]] inline vec3 xyz() const {
        return {this->x, this->y, this->z};
    }

    [[nodiscard]] inline vec3 xyw() const {
        return {this->x, this->y, this->w};
    }

    [[nodiscard]] inline vec3 xzy() const {
        return {this->x, this->z, this->y};
    }

    [[nodiscard]] inline vec3 xzw() const {
        return {this->x, this->z, this->w};
    }

    [[nodiscard]] inline vec3 xwy() const {
        return {this->x, this->w, this->y};
    }

    [[nodiscard]] inline vec3 xwz() const {
        return {this->x, this->w, this->z};
    }

    [[nodiscard]] inline vec3 yxz() const {
        return {this->y, this->x, this->z};
    }

    [[nodiscard]] inline vec3 yxw() const {
        return {this->y, this->x, this->w};
    }

    [[nodiscard]] inline vec3 yzx() const {
        return {this->y, this->z, this->x};
    }

    [[nodiscard]] inline vec3 yzw() const {
        return {this->y, this->z, this->w};
    }

    [[nodiscard]] inline vec3 ywx() const {
        return {this->y, this->w, this->x};
    }

    [[nodiscard]] inline vec3 ywz() const {
        return {this->y, this->w, this->z};
    }

    [[nodiscard]] inline vec3 zxy() const {
        return {this->z, this->x, this->y};
    }

    [[nodiscard]] inline vec3 zxw() const {
        return {this->z, this->x, this->w};
    }

    [[nodiscard]] inline vec3 zyx() const {
        return {this->z, this->y, this->x};
    }

    [[nodiscard]] inline vec3 zyw() const {
        return {this->z, this->y, this->w};
    }

    [[nodiscard]] inline vec3 zwx() const {
        return {this->z, this->w, this->x};
    }

    [[nodiscard]] inline vec3 zwy() const {
        return {this->z, this->w, this->y};
    }

    [[nodiscard]] inline vec3 wxy() const {
        return {this->w, this->x, this->y};
    }

    [[nodiscard]] inline vec3 wxz() const {
        return {this->w, this->x, this->z};
    }

    [[nodiscard]] inline vec3 wyx() const {
        return {this->w, this->y, this->x};
    }

    [[nodiscard]] inline vec3 wyz() const {
        return {this->w, this->y, this->z};
    }

    [[nodiscard]] inline vec3 wzx() const {
        return {this->w, this->z, this->x};
    }

    [[nodiscard]] inline vec3 wzy() const {
        return {this->w, this->z, this->y};
    }

    [[nodiscard]] inline vec4 xyzw() const {
        return {this->x, this->y, this->z, this->w};
    }

    [[nodiscard]] inline vec4 xywz() const {
        return {this->x, this->y, this->w, this->z};
    }

    [[nodiscard]] inline vec4 xzyw() const {
        return {this->x, this->z, this->y, this->w};
    }

    [[nodiscard]] inline vec4 xzwy() const {
        return {this->x, this->z, this->w, this->y};
    }

    [[nodiscard]] inline vec4 xwyz() const {
        return {this->x, this->w, this->y, this->z};
    }

    [[nodiscard]] inline vec4 xwzy() const {
        return {this->x, this->w, this->z, this->y};
    }

    [[nodiscard]] inline vec4 yxzw() const {
        return {this->y, this->x, this->z, this->w};
    }

    [[nodiscard]] inline vec4 yxwz() const {
        return {this->y, this->x, this->w, this->z};
    }

    [[nodiscard]] inline vec4 yzxw() const {
        return {this->y, this->z, this->x, this->w};
    }

    [[nodiscard]] inline vec4 yzwx() const {
        return {this->y, this->z, this->w, this->x};
    }

    [[nodiscard]] inline vec4 ywxz() const {
        return {this->y, this->w, this->x, this->z};
    }

    [[nodiscard]] inline vec4 ywzx() const {
        return {this->y, this->w, this->z, this->x};
    }

    [[nodiscard]] inline vec4 zxyw() const {
        return {this->z, this->x, this->y, this->w};
    }

    [[nodiscard]] inline vec4 zxwy() const {
        return {this->z, this->x, this->w, this->y};
    }

    [[nodiscard]] inline vec4 zyxw() const {
        return {this->z, this->y, this->x, this->w};
    }

    [[nodiscard]] inline vec4 zywx() const {
        return {this->z, this->y, this->w, this->x};
    }

    [[nodiscard]] inline vec4 zwxy() const {
        return {this->z, this->w, this->x, this->y};
    }

    [[nodiscard]] inline vec4 zwyx() const {
        return {this->z, this->w, this->y, this->x};
    }

    [[nodiscard]] inline vec4 wxyz() const {
        return {this->w, this->x, this->y, this->z};
    }

    [[nodiscard]] inline vec4 wxzy() const {
        return {this->w, this->x, this->z, this->y};
    }

    [[nodiscard]] inline vec4 wyxz() const {
        return {this->w, this->y, this->x, this->z};
    }

    [[nodiscard]] inline vec4 wyzx() const {
        return {this->w, this->y, this->z, this->x};
    }

    [[nodiscard]] inline vec4 wzxy() const {
        return {this->w, this->z, this->x, this->y};
    }

    [[nodiscard]] inline vec4 wzyx() const {
        return {this->w, this->z, this->y, this->x};
    }

    [[nodiscard]] inline float len2() const {
        return this->x * this->x+this->y * this->y+this->z * this->z+this->w * this->w;
    }
    [[nodiscard]] inline float len() const {
        return sqrt(this->len2());
    }
};

[[nodiscard]] inline vec4 operator+(const vec4& a, const vec4& b) {
    return {a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w};
}

[[nodiscard]] inline vec4 operator-(const vec4& a, const vec4& b) {
    return {a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w};
}

[[nodiscard]] inline vec4 operator*(const vec4& a, const vec4& b) {
    return {a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w};
}

[[nodiscard]] inline vec4 operator/(const vec4& a, const vec4& b) {
    return {a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w};
}

inline vec4& operator+=(vec4& a, const vec4& b) {
    a.x += b.x;
    a.y += b.y;
    a.z += b.z;
    a.w += b.w;
    return a;
}

inline vec4& operator-=(vec4& a, const vec4& b) {
    a.x -= b.x;
    a.y -= b.y;
    a.z -= b.z;
    a.w -= b.w;
    return a;
}

inline vec4& operator*=(vec4& a, const vec4& b) {
    a.x *= b.x;
    a.y *= b.y;
    a.z *= b.z;
    a.w *= b.w;
    return a;
}

inline vec4& operator/=(vec4& a, const vec4& b) {
    a.x /= b.x;
    a.y /= b.y;
    a.z /= b.z;
    a.w /= b.w;
    return a;
}

[[nodiscard]] inline vec4 operator-(const vec4& vec) {
    return {-vec.x, -vec.y, -vec.z, -vec.w};
}

[[nodiscard]] inline vec4 operator*(const vec4& vec, float scl) {
    return {vec.x * scl, vec.y * scl, vec.z * scl, vec.w * scl};
}

[[nodiscard]] inline vec4 operator*(float scl, const vec4& vec) {
    return {scl * vec.x , scl * vec.y , scl * vec.z , scl * vec.w };
}

[[nodiscard]] inline vec4 operator/(const vec4& vec, float scl) {
    return {vec.x / scl, vec.y / scl, vec.z / scl, vec.w / scl};
}

[[nodiscard]] inline vec4 operator/(float scl, const vec4& vec) {
    return {scl / vec.x , scl / vec.y , scl / vec.z , scl / vec.w };
}

[[nodiscard]] inline vec4& operator*=(vec4& vec, float scl) {
    vec.x *= scl;
    vec.y *= scl;
    vec.z *= scl;
    vec.w *= scl;
return vec;
}

[[nodiscard]] inline vec4& operator/=(vec4& vec, float scl) {
    vec.x /= scl;
    vec.y /= scl;
    vec.z /= scl;
    vec.w /= scl;
return vec;
}

inline std::istream& operator>>(std::istream& stream, vec4& vec) {
    return stream >> vec.x >> vec.y >> vec.z >> vec.w;
}


struct color3 {
    float r = 0;
    float g = 0;
    float b = 0;

    [[nodiscard]] inline vec2 rg() const {
        return {this->r, this->g};
    }

    [[nodiscard]] inline vec2 rb() const {
        return {this->r, this->b};
    }

    [[nodiscard]] inline vec2 gr() const {
        return {this->g, this->r};
    }

    [[nodiscard]] inline vec2 gb() const {
        return {this->g, this->b};
    }

    [[nodiscard]] inline vec2 br() const {
        return {this->b, this->r};
    }

    [[nodiscard]] inline vec2 bg() const {
        return {this->b, this->g};
    }

    [[nodiscard]] inline vec3 rgb() const {
        return {this->r, this->g, this->b};
    }

    [[nodiscard]] inline vec3 rbg() const {
        return {this->r, this->b, this->g};
    }

    [[nodiscard]] inline vec3 grb() const {
        return {this->g, this->r, this->b};
    }

    [[nodiscard]] inline vec3 gbr() const {
        return {this->g, this->b, this->r};
    }

    [[nodiscard]] inline vec3 brg() const {
        return {this->b, this->r, this->g};
    }

    [[nodiscard]] inline vec3 bgr() const {
        return {this->b, this->g, this->r};
    }

    [[nodiscard]] inline float len2() const {
        return this->r * this->r+this->g * this->g+this->b * this->b;
    }
    [[nodiscard]] inline float len() const {
        return sqrt(this->len2());
    }
};

[[nodiscard]] inline color3 operator+(const color3& a, const color3& b) {
    return {a.r + b.r, a.g + b.g, a.b + b.b};
}

[[nodiscard]] inline color3 operator-(const color3& a, const color3& b) {
    return {a.r - b.r, a.g - b.g, a.b - b.b};
}

[[nodiscard]] inline color3 operator*(const color3& a, const color3& b) {
    return {a.r * b.r, a.g * b.g, a.b * b.b};
}

[[nodiscard]] inline color3 operator/(const color3& a, const color3& b) {
    return {a.r / b.r, a.g / b.g, a.b / b.b};
}

inline color3& operator+=(color3& a, const color3& b) {
    a.r += b.r;
    a.g += b.g;
    a.b += b.b;
    return a;
}

inline color3& operator-=(color3& a, const color3& b) {
    a.r -= b.r;
    a.g -= b.g;
    a.b -= b.b;
    return a;
}

inline color3& operator*=(color3& a, const color3& b) {
    a.r *= b.r;
    a.g *= b.g;
    a.b *= b.b;
    return a;
}

inline color3& operator/=(color3& a, const color3& b) {
    a.r /= b.r;
    a.g /= b.g;
    a.b /= b.b;
    return a;
}

[[nodiscard]] inline color3 operator-(const color3& vec) {
    return {-vec.r, -vec.g, -vec.b};
}

[[nodiscard]] inline color3 operator*(const color3& vec, float scl) {
    return {vec.r * scl, vec.g * scl, vec.b * scl};
}

[[nodiscard]] inline color3 operator*(float scl, const color3& vec) {
    return {scl * vec.r , scl * vec.g , scl * vec.b };
}

[[nodiscard]] inline color3 operator/(const color3& vec, float scl) {
    return {vec.r / scl, vec.g / scl, vec.b / scl};
}

[[nodiscard]] inline color3 operator/(float scl, const color3& vec) {
    return {scl / vec.r , scl / vec.g , scl / vec.b };
}

[[nodiscard]] inline color3& operator*=(color3& vec, float scl) {
    vec.r *= scl;
    vec.g *= scl;
    vec.b *= scl;
return vec;
}

[[nodiscard]] inline color3& operator/=(color3& vec, float scl) {
    vec.r /= scl;
    vec.g /= scl;
    vec.b /= scl;
return vec;
}

inline std::istream& operator>>(std::istream& stream, color3& vec) {
    return stream >> vec.r >> vec.g >> vec.b;
}


struct color4 {
    float r = 0;
    float g = 0;
    float b = 0;
    float a = 0;

    [[nodiscard]] inline vec2 rg() const {
        return {this->r, this->g};
    }

    [[nodiscard]] inline vec2 rb() const {
        return {this->r, this->b};
    }

    [[nodiscard]] inline vec2 ra() const {
        return {this->r, this->a};
    }

    [[nodiscard]] inline vec2 gr() const {
        return {this->g, this->r};
    }

    [[nodiscard]] inline vec2 gb() const {
        return {this->g, this->b};
    }

    [[nodiscard]] inline vec2 ga() const {
        return {this->g, this->a};
    }

    [[nodiscard]] inline vec2 br() const {
        return {this->b, this->r};
    }

    [[nodiscard]] inline vec2 bg() const {
        return {this->b, this->g};
    }

    [[nodiscard]] inline vec2 ba() const {
        return {this->b, this->a};
    }

    [[nodiscard]] inline vec2 ar() const {
        return {this->a, this->r};
    }

    [[nodiscard]] inline vec2 ag() const {
        return {this->a, this->g};
    }

    [[nodiscard]] inline vec2 ab() const {
        return {this->a, this->b};
    }

    [[nodiscard]] inline vec3 rgb() const {
        return {this->r, this->g, this->b};
    }

    [[nodiscard]] inline vec3 rga() const {
        return {this->r, this->g, this->a};
    }

    [[nodiscard]] inline vec3 rbg() const {
        return {this->r, this->b, this->g};
    }

    [[nodiscard]] inline vec3 rba() const {
        return {this->r, this->b, this->a};
    }

    [[nodiscard]] inline vec3 rag() const {
        return {this->r, this->a, this->g};
    }

    [[nodiscard]] inline vec3 rab() const {
        return {this->r, this->a, this->b};
    }

    [[nodiscard]] inline vec3 grb() const {
        return {this->g, this->r, this->b};
    }

    [[nodiscard]] inline vec3 gra() const {
        return {this->g, this->r, this->a};
    }

    [[nodiscard]] inline vec3 gbr() const {
        return {this->g, this->b, this->r};
    }

    [[nodiscard]] inline vec3 gba() const {
        return {this->g, this->b, this->a};
    }

    [[nodiscard]] inline vec3 gar() const {
        return {this->g, this->a, this->r};
    }

    [[nodiscard]] inline vec3 gab() const {
        return {this->g, this->a, this->b};
    }

    [[nodiscard]] inline vec3 brg() const {
        return {this->b, this->r, this->g};
    }

    [[nodiscard]] inline vec3 bra() const {
        return {this->b, this->r, this->a};
    }

    [[nodiscard]] inline vec3 bgr() const {
        return {this->b, this->g, this->r};
    }

    [[nodiscard]] inline vec3 bga() const {
        return {this->b, this->g, this->a};
    }

    [[nodiscard]] inline vec3 bar() const {
        return {this->b, this->a, this->r};
    }

    [[nodiscard]] inline vec3 bag() const {
        return {this->b, this->a, this->g};
    }

    [[nodiscard]] inline vec3 arg() const {
        return {this->a, this->r, this->g};
    }

    [[nodiscard]] inline vec3 arb() const {
        return {this->a, this->r, this->b};
    }

    [[nodiscard]] inline vec3 agr() const {
        return {this->a, this->g, this->r};
    }

    [[nodiscard]] inline vec3 agb() const {
        return {this->a, this->g, this->b};
    }

    [[nodiscard]] inline vec3 abr() const {
        return {this->a, this->b, this->r};
    }

    [[nodiscard]] inline vec3 abg() const {
        return {this->a, this->b, this->g};
    }

    [[nodiscard]] inline vec4 rgba() const {
        return {this->r, this->g, this->b, this->a};
    }

    [[nodiscard]] inline vec4 rgab() const {
        return {this->r, this->g, this->a, this->b};
    }

    [[nodiscard]] inline vec4 rbga() const {
        return {this->r, this->b, this->g, this->a};
    }

    [[nodiscard]] inline vec4 rbag() const {
        return {this->r, this->b, this->a, this->g};
    }

    [[nodiscard]] inline vec4 ragb() const {
        return {this->r, this->a, this->g, this->b};
    }

    [[nodiscard]] inline vec4 rabg() const {
        return {this->r, this->a, this->b, this->g};
    }

    [[nodiscard]] inline vec4 grba() const {
        return {this->g, this->r, this->b, this->a};
    }

    [[nodiscard]] inline vec4 grab() const {
        return {this->g, this->r, this->a, this->b};
    }

    [[nodiscard]] inline vec4 gbra() const {
        return {this->g, this->b, this->r, this->a};
    }

    [[nodiscard]] inline vec4 gbar() const {
        return {this->g, this->b, this->a, this->r};
    }

    [[nodiscard]] inline vec4 garb() const {
        return {this->g, this->a, this->r, this->b};
    }

    [[nodiscard]] inline vec4 gabr() const {
        return {this->g, this->a, this->b, this->r};
    }

    [[nodiscard]] inline vec4 brga() const {
        return {this->b, this->r, this->g, this->a};
    }

    [[nodiscard]] inline vec4 brag() const {
        return {this->b, this->r, this->a, this->g};
    }

    [[nodiscard]] inline vec4 bgra() const {
        return {this->b, this->g, this->r, this->a};
    }

    [[nodiscard]] inline vec4 bgar() const {
        return {this->b, this->g, this->a, this->r};
    }

    [[nodiscard]] inline vec4 barg() const {
        return {this->b, this->a, this->r, this->g};
    }

    [[nodiscard]] inline vec4 bagr() const {
        return {this->b, this->a, this->g, this->r};
    }

    [[nodiscard]] inline vec4 argb() const {
        return {this->a, this->r, this->g, this->b};
    }

    [[nodiscard]] inline vec4 arbg() const {
        return {this->a, this->r, this->b, this->g};
    }

    [[nodiscard]] inline vec4 agrb() const {
        return {this->a, this->g, this->r, this->b};
    }

    [[nodiscard]] inline vec4 agbr() const {
        return {this->a, this->g, this->b, this->r};
    }

    [[nodiscard]] inline vec4 abrg() const {
        return {this->a, this->b, this->r, this->g};
    }

    [[nodiscard]] inline vec4 abgr() const {
        return {this->a, this->b, this->g, this->r};
    }

    [[nodiscard]] inline float len2() const {
        return this->r * this->r+this->g * this->g+this->b * this->b+this->a * this->a;
    }
    [[nodiscard]] inline float len() const {
        return sqrt(this->len2());
    }
};

[[nodiscard]] inline color4 operator+(const color4& a, const color4& b) {
    return {a.r + b.r, a.g + b.g, a.b + b.b, a.a + b.a};
}

[[nodiscard]] inline color4 operator-(const color4& a, const color4& b) {
    return {a.r - b.r, a.g - b.g, a.b - b.b, a.a - b.a};
}

[[nodiscard]] inline color4 operator*(const color4& a, const color4& b) {
    return {a.r * b.r, a.g * b.g, a.b * b.b, a.a * b.a};
}

[[nodiscard]] inline color4 operator/(const color4& a, const color4& b) {
    return {a.r / b.r, a.g / b.g, a.b / b.b, a.a / b.a};
}

inline color4& operator+=(color4& a, const color4& b) {
    a.r += b.r;
    a.g += b.g;
    a.b += b.b;
    a.a += b.a;
    return a;
}

inline color4& operator-=(color4& a, const color4& b) {
    a.r -= b.r;
    a.g -= b.g;
    a.b -= b.b;
    a.a -= b.a;
    return a;
}

inline color4& operator*=(color4& a, const color4& b) {
    a.r *= b.r;
    a.g *= b.g;
    a.b *= b.b;
    a.a *= b.a;
    return a;
}

inline color4& operator/=(color4& a, const color4& b) {
    a.r /= b.r;
    a.g /= b.g;
    a.b /= b.b;
    a.a /= b.a;
    return a;
}

[[nodiscard]] inline color4 operator-(const color4& vec) {
    return {-vec.r, -vec.g, -vec.b, -vec.a};
}

[[nodiscard]] inline color4 operator*(const color4& vec, float scl) {
    return {vec.r * scl, vec.g * scl, vec.b * scl, vec.a * scl};
}

[[nodiscard]] inline color4 operator*(float scl, const color4& vec) {
    return {scl * vec.r , scl * vec.g , scl * vec.b , scl * vec.a };
}

[[nodiscard]] inline color4 operator/(const color4& vec, float scl) {
    return {vec.r / scl, vec.g / scl, vec.b / scl, vec.a / scl};
}

[[nodiscard]] inline color4 operator/(float scl, const color4& vec) {
    return {scl / vec.r , scl / vec.g , scl / vec.b , scl / vec.a };
}

[[nodiscard]] inline color4& operator*=(color4& vec, float scl) {
    vec.r *= scl;
    vec.g *= scl;
    vec.b *= scl;
    vec.a *= scl;
return vec;
}

[[nodiscard]] inline color4& operator/=(color4& vec, float scl) {
    vec.r /= scl;
    vec.g /= scl;
    vec.b /= scl;
    vec.a /= scl;
return vec;
}

inline std::istream& operator>>(std::istream& stream, color4& vec) {
    return stream >> vec.r >> vec.g >> vec.b >> vec.a;
}


